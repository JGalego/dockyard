version: '3'

tasks:
  scan:
    desc: "Run security scan on a specific MCP server"
    summary: |
      Run mcp-scan on a specific MCP server configuration.
      
      Usage:
        task scan -- npx/browserbase-mcp-server
        task scan -- uvx/blender-mcp
        task scan -- npx/sentry-mcp-server
      
      The server path should be relative to the project root and contain a spec.yaml file.
    requires:
      vars: [CLI_ARGS]
    vars:
      SERVER_PATH: '{{.CLI_ARGS}}'
      PROTOCOL:
        sh: echo "{{.SERVER_PATH}}" | cut -d'/' -f1
      SERVER_NAME:
        sh: echo "{{.SERVER_PATH}}" | cut -d'/' -f2
    cmds:
      - |
        if [ ! -f "{{.SERVER_PATH}}/spec.yaml" ]; then
          echo "‚ùå Error: spec.yaml not found at {{.SERVER_PATH}}/spec.yaml"
          exit 1
        fi
      - 'echo "üîç Scanning MCP server: {{.SERVER_NAME}} ({{.PROTOCOL}})"'
      - |
        python3 scripts/mcp-scan/generate_mcp_config.py \
          "{{.SERVER_PATH}}/spec.yaml" \
          "{{.PROTOCOL}}" \
          "{{.SERVER_NAME}}" \
          > "/tmp/{{.SERVER_NAME}}-mcp-config.json"
      - |
        python3 scripts/mcp-scan/run_scan.py \
          "/tmp/{{.SERVER_NAME}}-mcp-config.json" \
          > "/tmp/mcp-scan-{{.SERVER_NAME}}.json"
      - |
        python3 scripts/mcp-scan/process_scan_results.py \
          "/tmp/mcp-scan-{{.SERVER_NAME}}.json" \
          "{{.SERVER_NAME}}" \
          "{{.SERVER_PATH}}/spec.yaml"
      - echo "‚úÖ Scan completed for {{.SERVER_NAME}}"
      - 'echo "üìÑ Raw results: /tmp/mcp-scan-{{.SERVER_NAME}}.json"'

  scan-all:
    desc: "Run security scan on all MCP servers"
    summary: |
      Run mcp-scan on all MCP server configurations found in the project.
      
      This will scan all spec.yaml files found in:
      - npx/*/spec.yaml
      - uvx/*/spec.yaml  
      - go/*/spec.yaml
    cmds:
      - |
        echo "üîç Discovering all MCP server configurations..."
        configs=$(find npx uvx go -name "spec.yaml" -type f 2>/dev/null | sort)
        
        if [ -z "$configs" ]; then
          echo "‚ùå No MCP server configurations found"
          exit 1
        fi
        
        echo "üìã Found configurations:"
        echo "$configs" | sed 's/^/  - /'
        echo ""
        
        total=$(echo "$configs" | wc -l)
        current=0
        
        for config in $configs; do
          current=$((current + 1))
          server_dir=$(dirname "$config")
          
          echo "üîç [$current/$total] Scanning: $server_dir"
          task scan -- "$server_dir" || echo "‚ö†Ô∏è  Scan failed for $server_dir"
          echo ""
        done
        
        echo "‚úÖ All scans completed!"

  scan-setup:
    desc: "Setup mcp-scan tool"
    summary: |
      Install and setup the mcp-scan tool.
      This only needs to be run once or when the tool needs updating.
    cmds:
      - echo "üîß Setting up mcp-scan tool..."
      - uv tool install mcp-scan
      - echo "‚úÖ mcp-scan setup completed"
      - uv tool run mcp-scan --help || true

  scan-clean:
    desc: "Clean up temporary scan files"
    summary: |
      Remove temporary files created during security scans.
    cmds:
      - echo "üßπ Cleaning up temporary scan files..."
      - rm -f /tmp/*mcp-config.json /tmp/mcp-scan-*.json /tmp/mcp-scan-storage
      - echo "‚úÖ Cleanup completed"

  scan-help:
    desc: "Show help for security scanning tasks"
    summary: |
      Display detailed help and examples for using the security scanning tasks.
    cmds:
      - |
        echo "üîí MCP Security Scanning Tasks"
        echo "============================="
        echo ""
        echo "Available tasks:"
        echo "  scan        - Run security scan on a specific server"
        echo "  scan-all    - Run security scan on all servers"
        echo "  scan-setup  - Setup mcp-scan tool (run once)"
        echo "  scan-clean  - Clean up temporary files"
        echo "  scan-help   - Show this help"
        echo ""
        echo "Examples:"
        echo "  task scan -- npx/browserbase-mcp-server"
        echo "  task scan -- uvx/blender-mcp"
        echo "  task scan-all"
        echo "  task scan-setup"
        echo ""
        echo "The scan results will show:"
        echo "  ‚úÖ - No security issues found"
        echo "  ‚ùå - Security issues found (not allowlisted)"
        echo "  ‚ö†Ô∏è  - Security issues found but allowlisted"
        echo ""
        echo "For detailed analysis, check the raw JSON output files in /tmp/"

  build:
    desc: "Generate Dockerfile from MCP server spec"
    summary: |
      Generate a Dockerfile from an MCP server specification.
      
      Usage:
        task build -- npx/context7
        task build -- uvx/mcp-clickhouse
        task build -- go/my-go-server
      
      The server path should be relative to the project root and contain a spec.yaml file.
      Output will be written to stdout by default.
    requires:
      vars: [CLI_ARGS]
    vars:
      SERVER_PATH: '{{.CLI_ARGS}}'
      SPEC_FILE: '{{.SERVER_PATH}}/spec.yaml'
    cmds:
      - |
        if [ ! -f "{{.SPEC_FILE}}" ]; then
          echo "‚ùå Error: spec.yaml not found at {{.SPEC_FILE}}"
          exit 1
        fi
      - echo "üèóÔ∏è Generating Dockerfile for {{.SERVER_PATH}}"
      - build/dockhand build -c "{{.SPEC_FILE}}"

  build-file:
    desc: "Generate Dockerfile from MCP server spec and save to file"
    summary: |
      Generate a Dockerfile from an MCP server specification and save to a file.
      
      Usage:
        task build-file -- npx/context7 Dockerfile
        task build-file -- uvx/mcp-clickhouse my-dockerfile
      
      Arguments:
        1. Server path (e.g., npx/context7)
        2. Output file path (e.g., Dockerfile)
    requires:
      vars: [CLI_ARGS]
    vars:
      ARGS: '{{.CLI_ARGS}}'
      SERVER_PATH:
        sh: echo "{{.ARGS}}" | cut -d' ' -f1
      OUTPUT_FILE:
        sh: echo "{{.ARGS}}" | cut -d' ' -f2
      SPEC_FILE: '{{.SERVER_PATH}}/spec.yaml'
    cmds:
      - |
        if [ ! -f "{{.SPEC_FILE}}" ]; then
          echo "‚ùå Error: spec.yaml not found at {{.SPEC_FILE}}"
          exit 1
        fi
      - |
        if [ -z "{{.OUTPUT_FILE}}" ]; then
          echo "‚ùå Error: Output file not specified"
          echo "Usage: task build-file -- <server-path> <output-file>"
          exit 1
        fi
      - echo "üèóÔ∏è Generating Dockerfile for {{.SERVER_PATH}} ‚Üí {{.OUTPUT_FILE}}"
      - build/dockhand build -c "{{.SPEC_FILE}}" -o "{{.OUTPUT_FILE}}"
      - echo "‚úÖ Dockerfile saved to {{.OUTPUT_FILE}}"

  build-tag:
    desc: "Generate Dockerfile with custom tag"
    summary: |
      Generate a Dockerfile from an MCP server specification with a custom tag.
      
      Usage:
        task build-tag -- npx/context7 my-custom-tag:latest
        task build-tag -- uvx/mcp-clickhouse myregistry/image:v1.0.0
      
      Arguments:
        1. Server path (e.g., npx/context7)
        2. Custom tag (e.g., my-custom-tag:latest)
    requires:
      vars: [CLI_ARGS]
    vars:
      ARGS: '{{.CLI_ARGS}}'
      SERVER_PATH:
        sh: echo "{{.ARGS}}" | cut -d' ' -f1
      CUSTOM_TAG:
        sh: echo "{{.ARGS}}" | cut -d' ' -f2-
      SPEC_FILE: '{{.SERVER_PATH}}/spec.yaml'
    cmds:
      - |
        if [ ! -f "{{.SPEC_FILE}}" ]; then
          echo "‚ùå Error: spec.yaml not found at {{.SPEC_FILE}}"
          exit 1
        fi
      - |
        if [ -z "{{.CUSTOM_TAG}}" ]; then
          echo "‚ùå Error: Custom tag not specified"
          echo "Usage: task build-tag -- <server-path> <custom-tag>"
          exit 1
        fi
      - echo "üèóÔ∏è Generating Dockerfile for {{.SERVER_PATH}} with tag {{.CUSTOM_TAG}}"
      - build/dockhand build -c "{{.SPEC_FILE}}" -t "{{.CUSTOM_TAG}}"

  test-build:
    desc: "Test build an MCP server container"
    summary: |
      Generate Dockerfile and build a container image for testing.
      
      Usage:
        task test-build -- npx/context7
        task test-build -- uvx/mcp-clickhouse
      
      This will:
      1. Generate a Dockerfile
      2. Build the container image
      3. Test that the container runs
    requires:
      vars: [CLI_ARGS]
    vars:
      SERVER_PATH: '{{.CLI_ARGS}}'
      PROTOCOL:
        sh: echo "{{.SERVER_PATH}}" | cut -d'/' -f1
      SERVER_NAME:
        sh: echo "{{.SERVER_PATH}}" | cut -d'/' -f2
      SPEC_FILE: '{{.SERVER_PATH}}/spec.yaml'
      TEST_TAG: 'test-{{.SERVER_NAME}}:latest'
    cmds:
      - |
        if [ ! -f "{{.SPEC_FILE}}" ]; then
          echo "‚ùå Error: spec.yaml not found at {{.SPEC_FILE}}"
          exit 1
        fi
      - echo "üèóÔ∏è Testing build for {{.SERVER_PATH}}"
      - echo "üìù Generating Dockerfile..."
      - build/dockhand build -c "{{.SPEC_FILE}}" -o "Dockerfile.test"
      - echo "üî® Building container image..."
      - podman build -t "{{.TEST_TAG}}" -f Dockerfile.test .
      - echo "üß™ Testing container..."
      - podman run --rm "{{.TEST_TAG}}" --help || echo "‚ö†Ô∏è  Container built but --help failed (this may be expected)"
      - echo "‚úÖ Test build completed for {{.SERVER_NAME}}"
      - echo "üè∑Ô∏è Image tagged as {{.TEST_TAG}}"
      - rm -f Dockerfile.test

  build-setup:
    desc: "Build and install dockhand CLI"
    summary: |
      Build the dockhand CLI tool from source.
      This needs to be run once or when the tool is updated.
    sources:
      - "cmd/dockhand/**/*.go"
      - "go.mod"
      - "go.sum"
    generates:
      - "build/dockhand"
    cmds:
      - echo "üîß Building dockhand CLI..."
      - mkdir -p build
      - go build -o build/dockhand ./cmd/dockhand
      - echo "‚úÖ dockhand CLI built successfully"
      - build/dockhand --help

  build-help:
    desc: "Show help for build tasks"
    summary: |
      Display detailed help and examples for using the build tasks.
    cmds:
      - |
        echo "üèóÔ∏è MCP Server Build Tasks"
        echo "========================"
        echo ""
        echo "Available tasks:"
        echo "  build        - Generate Dockerfile to stdout"
        echo "  build-file   - Generate Dockerfile and save to file"
        echo "  build-tag    - Generate Dockerfile with custom tag"
        echo "  test-build   - Generate, build, and test container"
        echo "  build-setup  - Build dockhand CLI tool"
        echo "  build-help   - Show this help"
        echo ""
        echo "Examples:"
        echo "  task build -- npx/context7"
        echo "  task build-file -- npx/context7 Dockerfile"
        echo "  task build-tag -- uvx/mcp-clickhouse myregistry/image:v1.0.0"
        echo "  task test-build -- npx/context7"
        echo "  task build-setup"
        echo ""
        echo "Prerequisites:"
        echo "  - Run 'task build-setup' first to build the dockhand CLI"
        echo "  - Ensure podman is running and 'dev' container exists"
        echo ""
        echo "The generated Dockerfiles can be used with:"
        echo "  podman build -t my-image:tag -f Dockerfile ."