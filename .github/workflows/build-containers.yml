name: Build MCP Server Containers

on:
  push:
    branches: [ main ]
    paths:
      - 'npx/**/*.yaml'
      - 'uvx/**/*.yaml'
      - 'go/**/*.yaml'
      - 'main.go'
      - 'go.mod'
      - 'go.sum'
  pull_request:
    branches: [ main ]
    paths:
      - 'npx/**/*.yaml'
      - 'uvx/**/*.yaml'
      - 'go/**/*.yaml'
      - 'main.go'
      - 'go.mod'
      - 'go.sum'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  discover-configs:
    runs-on: ubuntu-latest
    outputs:
      configs: ${{ steps.find-configs.outputs.configs }}
      changed-configs: ${{ steps.find-configs.outputs.changed-configs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0  # Need full history for change detection

      - name: Find configuration files to build
        id: find-configs
        run: |
          # Find all YAML files in protocol directories
          all_configs=$(find npx uvx go -name "*.yaml" -type f 2>/dev/null | sort)
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # For manual triggers, build all configs
            configs_to_build="$all_configs"
            echo "Manual trigger - building all configurations"
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, build configs that changed compared to target branch
            changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
            configs_to_build=""
            
            # Check if main.go, go.mod, or go.sum changed (rebuild all)
            if echo "$changed_files" | grep -E "(main\.go|go\.mod|go\.sum)"; then
              echo "Core files changed - building all configurations"
              configs_to_build="$all_configs"
            else
              # Only build configs whose YAML files changed
              for config in $all_configs; do
                if echo "$changed_files" | grep -q "^$config$"; then
                  configs_to_build="$configs_to_build$config"$'\n'
                fi
              done
            fi
          else
            # For pushes to main, build configs that changed in this push
            changed_files=$(git diff --name-only HEAD~1..HEAD)
            configs_to_build=""
            
            # Check if main.go, go.mod, or go.sum changed (rebuild all)
            if echo "$changed_files" | grep -E "(main\.go|go\.mod|go\.sum)"; then
              echo "Core files changed - building all configurations"
              configs_to_build="$all_configs"
            else
              # Only build configs whose YAML files changed
              for config in $all_configs; do
                if echo "$changed_files" | grep -q "^$config$"; then
                  configs_to_build="$configs_to_build$config"$'\n'
                fi
              done
            fi
          fi
          
          # Convert to JSON array, filtering out empty lines
          configs_json=$(echo "$configs_to_build" | grep -v '^$' | jq -R -s -c 'split("\n")[:-1]')
          all_configs_json=$(echo "$all_configs" | jq -R -s -c 'split("\n")[:-1]')
          
          echo "configs=$all_configs_json" >> $GITHUB_OUTPUT
          echo "changed-configs=$configs_json" >> $GITHUB_OUTPUT
          
          echo "All configurations: $all_configs_json"
          echo "Configurations to build: $configs_json"

  build-containers:
    needs: discover-configs
    runs-on: ubuntu-latest
    if: ${{ needs.discover-configs.outputs.changed-configs != '[]' }}
    strategy:
      matrix:
        config: ${{ fromJson(needs.discover-configs.outputs.changed-configs) }}
      fail-fast: false
    
    permissions:
      contents: read
      packages: write
      id-token: write  # Needed for provenance attestation

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: '1.24'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata from config
        id: meta
        run: |
          config_file="${{ matrix.config }}"
          echo "config_file=$config_file" >> $GITHUB_OUTPUT
          
          # Extract protocol from directory name
          protocol=$(dirname "$config_file")
          echo "protocol=$protocol" >> $GITHUB_OUTPUT
          
          # Extract server name from filename (without .yaml extension)
          server_name=$(basename "$config_file" .yaml)
          echo "server_name=$server_name" >> $GITHUB_OUTPUT
          
          # Generate image name
          image_name="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${protocol}/${server_name}"
          echo "image_name=$image_name" >> $GITHUB_OUTPUT

      - name: Generate Dockerfile
        id: dockerfile
        run: |
          echo "Generating Dockerfile for ${{ steps.meta.outputs.config_file }}"
          
          # Create a temporary directory for the Dockerfile
          dockerfile_dir=$(mktemp -d)
          dockerfile_path="${dockerfile_dir}/Dockerfile"
          
          # Generate the Dockerfile using our tool
          go run main.go -config "${{ steps.meta.outputs.config_file }}" -output "${dockerfile_path}"
          
          echo "dockerfile_dir=$dockerfile_dir" >> $GITHUB_OUTPUT
          echo "dockerfile_path=$dockerfile_path" >> $GITHUB_OUTPUT
          
          # Display the generated Dockerfile for debugging
          echo "Generated Dockerfile:"
          cat "${dockerfile_path}"

      - name: Extract metadata for Docker
        id: docker-meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5
        with:
          images: ${{ steps.meta.outputs.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6
        with:
          context: ${{ steps.dockerfile.outputs.dockerfile_dir }}
          file: ${{ steps.dockerfile.outputs.dockerfile_path }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true
          provenance: true
          annotations: |
            org.opencontainers.image.title=${{ steps.meta.outputs.server_name }}
            org.opencontainers.image.description=MCP server for ${{ steps.meta.outputs.server_name }}
            org.opencontainers.image.vendor=Stacklok
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Generate image summary
        run: |
          echo "## Container Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Config**: ${{ steps.meta.outputs.config_file }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Protocol**: ${{ steps.meta.outputs.protocol }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Server**: ${{ steps.meta.outputs.server_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ steps.meta.outputs.image_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **SBOM**: ✅ Included" >> $GITHUB_STEP_SUMMARY
          echo "- **Provenance**: ✅ Attested" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "- **Status**: ✅ Built and pushed" >> $GITHUB_STEP_SUMMARY
            echo "- **Tags**:" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.docker-meta.outputs.tags }}" | sed 's/^/  - /' >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ✅ Built (not pushed - PR)" >> $GITHUB_STEP_SUMMARY
          fi

  summary:
    needs: [discover-configs, build-containers]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## Dockyard Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Configs**: ${{ needs.discover-configs.outputs.configs }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changed Configs**: ${{ needs.discover-configs.outputs.changed-configs }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-containers.result }}" == "success" ]; then
            echo "- **Build Status**: ✅ All changed containers built successfully" >> $GITHUB_STEP_SUMMARY
            echo "- **Features**:" >> $GITHUB_STEP_SUMMARY
            echo "  - 🏗️ Multi-architecture support (amd64, arm64)" >> $GITHUB_STEP_SUMMARY
            echo "  - 📦 SBOM (Software Bill of Materials) included" >> $GITHUB_STEP_SUMMARY
            echo "  - 🔐 Provenance attestation for supply chain security" >> $GITHUB_STEP_SUMMARY
            echo "  - 🚀 GitHub Actions cache for faster builds" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-containers.result }}" == "failure" ]; then
            echo "- **Build Status**: ❌ Some containers failed to build" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-containers.result }}" == "skipped" ]; then
            echo "- **Build Status**: ⏭️ No configuration changes detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Build Status**: ⚠️ Build status unknown" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add efficiency note
          changed_count=$(echo '${{ needs.discover-configs.outputs.changed-configs }}' | jq length)
          total_count=$(echo '${{ needs.discover-configs.outputs.configs }}' | jq length)
          echo "- **Efficiency**: Built $changed_count out of $total_count configurations" >> $GITHUB_STEP_SUMMARY